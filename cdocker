#!/usr/bin/env node

var fs = require('fs');
var os = require('os');
var path = require('path');
var Docker = require('dockerode');
var pretty = require('prettysize');
var rangeParser = require('parse-numeric-range');
var deferred = require('deferred');
var Table = require('cli-table2');
var minimatch = require('minimatch');
var expand = require('brace-expansion');

var config = {
    containers: {},
    nodes: {}
};
var configfile = path.join(os.homedir(), '.cdocker.json');

var loadConfig = function () {
    try {
        var data = fs.readFileSync(configfile);
        config = JSON.parse(data);
    }
    catch (err) {
        console.log('Warning, could not load config', err.message);
    }
};

var saveConfig = function () {
    fs.writeFile(configfile, JSON.stringify(config, 3), function (err) {
        if (err) {
            console.log('Error saving configuration', err);
            return;
        }
    });
};

loadConfig();

var argv = require('yargs')
    .usage("Run Docker commands on a cluster without Swarm.")
    .command('node', 'Node related commands', function (yargs) {
        return yargs
            .command('add [ip]', 'Add one or more nodes to the cluster', function (yargs) {
                yargs.option('port', {
                        describe: 'Port for the Docker Engine API',
                        default: 2375
                    })
                ;
            }, function (argv) {
                // the ip specified may specify a range of ips to add (using brace syntax)
                // and do these in parallel the right way
                deferred.map(expand(argv.ip), function (ip) {
                    var promise = deferred();
                    var newnode = new Docker({host: ip, port: argv.port});
                    newnode.info(function(err, data) {
                        if(err) {
                            console.log("Could not add", ip, ":", err.message);
                            deferred.resolve();
                        } else {
                            console.log("Added engine at", ip);
                            config.nodes[data.Name] = {
                                port: argv.port,
                                ip: argv.ip
                            };
                            deferred.resolve();
                        }
                    });
                    return promise.promise;
                })(function () {
                    console.log('All done.');
                    saveConfig();
                });
            })
            .command('remove [ip]', 'Remove a node from the cluster')
            .command('ls', 'List nodes', function () {}, function (argv) {
                deferred.map(Object.keys(config.nodes), function (node) {
                    var promise = deferred();
                    new Docker({host: config.nodes[node].ip, port: config.nodes[node].port}).info(function (err, data) {
                        if (err) {
                            promise.resolve({
                                ip: config.nodes[node].ip,
                                status: 'down',
                                reason: err
                            });
                        } else {
                            data.ip = config.nodes[node].ip;
                            data.status = 'up';
                            promise.resolve(data);
                        }
                    });
                    return promise.promise;
                })(function (result) {
                    // build a fancy table
                    var table = new Table({
                        head: ['IP', '', 'Node', 'OS/Arch', 'CPUs', 'RAM', 'Running', 'Stopped'],
                        style: {
                            head: []
                        }
                    });
                    for (var i = 0; i < result.length; i++) {
                        if (result[i].status == 'up') {
                            table.push([
                                result[i].ip,
                                result[i].status,
                                result[i].Name,
                                result[i].OSType+'/'+result[i].Architecture,
                                result[i].NCPU,
                                pretty(result[i].MemTotal),
                                result[i].ContainersRunning,
                                result[i].ContainersStopped
                            ]);
                        } else {
                            table.push([
                                result[i].ip,
                                result[i].status
                            ]);
                        }
                    };
                    console.log(table.toString());
                });
            })
            .demandCommand(1)
        ;
    })
    .command('run', 'Run a command in a new container', function () {}, function (argv) {
        console.log(argv);
    })
    .command('start', 'Start one or more stopped containers')
    .command('stop', 'Stop one or more running containers')
    .command('kill', 'Kill one or more running containers')
    .command('rm', 'Remove one or more containers')
    .command('pull', 'Pull an image or a repository from a registry')
    .command('rmi', 'Remove one or more images')
    .command('ps', 'List containers')
    .demandCommand(1)
    .help('h')
    .alias('h', 'help')
    .argv
;