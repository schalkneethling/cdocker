#!/usr/bin/env node

var fs = require('fs');
var os = require('os');
var path = require('path');
var Docker = require('dockerode');
var pretty = require('prettysize');
var rangeParser = require('parse-numeric-range');
var deferred = require('deferred');
var Table = require('cli-table2');
var minimatch = require('minimatch');
var expand = require('brace-expansion');
var randomItem = require('random-item');
var child_process = require('child_process');
var yesNo = require('yes-no');
yesNo.userTests.push(function(value) {
    // Test functions should return a boolean for recognized 
    // values, or anything else (or nothing) for unrecognized. 
    if (value === 'on') {
        return true;
    }
    if (value === 'off') {
        return false;
    }
});

var config = {
    containers: {},
    nodes: {},
    overprovision: false
};
var configfile = path.join(os.homedir(), '.cdocker.json');

var escapeRegExp = function (str) {
  return str.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"); // $& means the whole matched string
}

var loadConfig = function () {
    try {
        var data = fs.readFileSync(configfile);
        config = JSON.parse(data);
    }
    catch (err) {
        console.log('Warning, could not load config', err.message);
    }
};

var saveConfig = function () {
    fs.writeFile(configfile, JSON.stringify(config, null, 10), function (err) {
        if (err) {
            console.log('Error saving configuration', err);
            return;
        }
    });
};

loadConfig();

var getNodeInfo = function (node) {
    var promise = deferred();
    new Docker({host: config.nodes[node].ip, port: config.nodes[node].port, timeout: 2000}).info(function (err, data) {
        if (err) {
            promise.resolve({
                ip: config.nodes[node].ip,
                status: 'down',
                reason: 'error',
                node: node
            });
        } else {
            data.ip = config.nodes[node].ip;
            data.status = 'up';
            promise.resolve(data);
        }
    });
    return promise.promise;
};

var parseEnv = function (argv) {
    // make sure we alway have array for env vars
    var constraints = [];
    if (argv.e) {
        if (!(argv.e instanceof Array)) {
            argv.e = [argv.e];
        }
        // look for constraints
        for (var i = argv.e.length; i--; ) {
            var keysplit = argv.e[i].split(":");
            if (keysplit[0] == 'constraint') {
                constraints.push(keysplit[1]);
            }
        }
    }
    return constraints;
};

var getMatchingContainers = function (node, constraint) {
    var promise = deferred();
    var dockerclient = new Docker({host: config.nodes[node].ip, port: config.nodes[node].port});
    dockerclient.listContainers({all: true}, function (err, containers) {
        // for each container
        var matchedcontainers = [];
        if (containers) {
            for (var i = containers.length - 1; i >= 0; i--) {
                var name = containers[i].Names[0].substring(1);
                var matched = true;
                if (constraint.includes("*")) {
                    // glob
                    if (!minimatch(name, constraint)) {
                        matched = false;
                    }
                } else {
                    // expand
                    var match_names = expand(constraint);
                    if (!match_names.includes(name)) {
                        matched = false;
                    }
                }
                if (matched) {
                    matchedcontainers.push(name); // containers[i].Id or name?
                }
            };
        }
        promise.resolve([node, matchedcontainers]);
    });
    return promise.promise;
};

var getMatchingNodes = function (nodenames, constraint) {
    // nodes are matched based on name and labels in the config.json
    var matchednodes = [];
    for (var i = nodenames.length - 1; i >= 0; i--) {
        // test the constraint against this node
        var matched = true;
        if (constraint.includes("==")) {
            var csplit = constraint.split("==");
            if (csplit[0] == "node") {
                // node
                if (csplit[1].includes("*")) {
                    // glob
                    if (!minimatch(nodenames[i], csplit[1])) {
                        matched = false;
                    }
                } else {
                    // expand
                    var match_names = expand(csplit[1]);
                    if (!match_names.includes(nodenames[i])) {
                        matched = false;
                    }
                }
            } else {
                // label
                if (config.nodes[nodenames[i]].labels) {
                    for (var j = config.nodes[nodenames[i]].labels.length - 1; j >= 0; j--) {
                        var lsplit = config.nodes[nodenames[i]].labels[j].split("=");
                        // if key matches
                        if (csplit[0] == lsplit[0]) {
                            // test value
                            if (csplit[1].includes("*")) {
                                // glob
                                if (!minimatch(lsplit[1], csplit[1])) {
                                    matched = false;
                                }
                            } else {
                                // expand
                                var match_values = expand(csplit[1]);
                                if (!match_values.includes(lsplit[1])) {
                                    matched = false;
                                }
                            }
                        } else {
                            matched = false;
                        }
                    };
                } else {
                    matched = false;
                }
            }
        } else {
            console.error("This constraint is not supported yet:", constraint);
            process.exit(1);
        }
        if (matched) {
            matchednodes.push(nodenames[i]);
        }
    };
    return matchednodes;
};

var orderNodesByRunning = function (nodes) {
    var promise = deferred();
    deferred.map(nodes, function (node) {
        var promise = deferred();
        new Docker({host: config.nodes[node].ip, port: config.nodes[node].port}).info(function (err, data) {
            promise.resolve([node, Math.floor(Math.random() * 20)]); // Math.floor(Math.random() * 20)
        });
        return promise.promise;
    })(function (result) {
        var sorted = result.sort(function(a, b) {
            return a[1] - b[1];
        });
        var orderednodes = [];
        for (var i = sorted.length; i--; ) {
            orderednodes.push(sorted[i][0]);
        }
        promise.resolve(orderednodes.reverse());
    });
    return promise.promise;
};

var runContainers = function (argv, containers) {
    // generate the docker commands
    for (var i = containers.length - 1; i >= 0; i--) {
        var container = containers[i];
        (function (container) {
            var cmdline = 'docker ';
            cmdline += process.argv.slice(2).join(' ').replace(new RegExp(escapeRegExp(argv.name), 'g'), container.name);
            console.log(argv.name);
            console.log(cmdline);
            // run in child process
            var opts = {
                env: {
                    'DOCKER_HOST': config.nodes[container.node].ip+':'+config.nodes[container.node].port
                }
            };
            child_process.exec(cmdline, opts, function (err, stdout, stderr) {
                if (!err) {
                    // expect just container id
                    console.log(container.node, ":", stdout.trim());
                } else {
                    // should show error
                    console.error(container.node, ":", stderr);
                }
            });
        })(container);
    }
};

var callContainerFunction = function (argv, func) {
    var nodes = Object.keys(config.nodes);
    // see if there is a node constraint
    var pattern = argv["_"][1].split('/');
    if (pattern.length > 1) {
        nodes = getMatchingNodes(nodes, "node=="+pattern[0]);
        var cpattern = pattern[1];
    } else {
        var cpattern = pattern[0];
    }
    // see if there is any classic constraints
    var constraints = parseEnv(argv);
    for (var i = constraints.length - 1; i >= 0; i--) {
        nodes = getMatchingNodes(nodes, constraints[i]);
    }
    // do each node in parallel
    deferred.map(nodes, function (node) {
        return getMatchingContainers(node, cpattern);
    })(function (result) {
        for (var i = result.length - 1; i >= 0; i--) {
            var node = result[i][0];
            var dockerclient = new Docker({host: config.nodes[node].ip, port: config.nodes[node].port});
            (function (dockerclient, node) {
                // dispatch the removes in parallel on each node
                deferred.map(result[i][1], function (cid) {
                    var promise = deferred();
                    var funccb = function (err, data) {
                        if (err) {
                            promise.resolve(err.message+cid);
                        } else {
                            promise.resolve(cid);
                        }
                    };
                    if (func == 'rm') {
                        dockerclient.getContainer(cid).remove(funccb);
                    }
                    else if (func == 'kill') {
                        dockerclient.getContainer(cid).kill(funccb);
                    }
                    else if (func == 'start') {
                        dockerclient.getContainer(cid).start(funccb);
                    }
                    else if (func == 'stop') {
                        dockerclient.getContainer(cid).stop(funccb);
                    }
                    return promise.promise;
                })(function (rmresult) {
                    for (var i = rmresult.length - 1; i >= 0; i--) {
                        console.log(node, ':', rmresult[i]);
                    };
                });
            })(dockerclient, node);
        };
    });
};

var argv = require('yargs')
    .usage("Run Docker commands on a cluster without Swarm.")
    .command('node', 'Node related commands', function (yargs) {
        return yargs
            .command('add [ip]', 'Add one or more nodes to the cluster', function (yargs) {
                yargs.option('port', {
                        describe: 'Port for the Docker Engine API',
                        default: 2375
                    })
                ;
            }, function (argv) {
                // the ip specified may specify a range of ips to add (using brace syntax)
                // and do these in parallel the right way
                deferred.map(expand(argv.ip), function (ip) {
                    var promise = deferred();
                    var newnode = new Docker({host: ip, port: argv.port});
                    newnode.info(function(err, data) {
                        if(err) {
                            console.log("Could not add", ip, ":", err.message);
                            promise.resolve();
                        } else {
                            console.log("Added engine at", ip);
                            config.nodes[data.Name] = {
                                port: argv.port,
                                ip: ip,
                                labels: data.Labels
                            };
                            promise.resolve();
                        }
                    });
                    return promise.promise;
                })(function () {
                    console.log('All done.');
                    saveConfig();
                });
            })
            .command('remove [ip]', 'Remove a node from the cluster')
            .command('overprovision [state]', 'Enable or disable over provisioning on this cluster', function () {}, function (argv) {
                if (!argv.state) {
                    if (config.overprovision) {
                        console.log('Cluster over provisioning is ON');
                    } else {
                        console.log('Cluster over provisioning is OFF');
                    }
                } else {
                    config.overprovision = yesNo.parse(argv.state);
                    saveConfig();
                }
            })
            .command('ls [pattern]', 'List nodes (optional: specify node constraint pattern)', function () {}, function (argv) {
                var nodes = Object.keys(config.nodes);
                // node constraint
                if (argv.pattern) {
                    nodes = getMatchingNodes(Object.keys(config.nodes), 'node=='+argv.pattern);
                }
                // classic swarm constraint
                var constraints = parseEnv(argv);
                for (var i = constraints.length - 1; i >= 0; i--) {
                    nodes = getMatchingNodes(nodes, constraints[i]);
                }
                // enumerate the node info
                deferred.map(nodes, getNodeInfo)(function (result) {
                    // build a fancy table
                    var table = new Table({
                        head: ['IP', '', 'Node', 'OS/Arch', 'CPUs', 'RAM', 'Running', 'Stopped', 'Labels'],
                        style: {
                            head: []
                        }
                    });
                    var totals = {
                        up: 0,
                        down: 0,
                        cpus: 0,
                        mem: 0,
                        running: 0,
                        stopped: 0
                    };
                    for (var i = 0; i < result.length; i++) {
                        if (result[i].status == 'up') {
                            // update totals
                            totals.up += 1;
                            totals.cpus += result[i].NCPU;
                            totals.mem += result[i].MemTotal;
                            totals.running += result[i].ContainersRunning;
                            totals.stopped += result[i].ContainersStopped;
                            // add to table
                            table.push([
                                result[i].ip,
                                result[i].status,
                                result[i].Name,
                                result[i].OSType+'/'+result[i].Architecture,
                                result[i].NCPU,
                                pretty(result[i].MemTotal),
                                result[i].ContainersRunning,
                                result[i].ContainersStopped,
                                JSON.stringify(result[i].Labels)
                            ]);
                        } else {
                            // node is down
                            totals.down += 1;
                            table.push([
                                result[i].ip,
                                result[i].status,
                                result[i].node
                            ]);
                        }
                    };
                    // add totals to table
                    table.push(['IP', '', 'Node', 'OS/Arch', 'CPUs', 'RAM', 'Running', 'Stopped', 'Labels']);
                    table.push([
                        'total: '+result.length,
                        'up: '+totals.up,
                        '',
                        '',
                        totals.cpus,
                        pretty(totals.mem),
                        totals.running,
                        totals.stopped,
                        ''
                    ]);
                    // draw table
                    console.log(table.toString());
                });
            })
            .command('ssh [pattern] [cmd]', 'Run a command via SSH on one or more Docker Engine hosts', function (yargs) {
                yargs.option('port', {
                        describe: 'SSH port',
                        default: 22
                    })
                yargs.option('user', {
                        describe: 'SSH user',
                        default: os.userInfo().username
                    })
                ;
            }, function (argv) {
                if((!argv.pattern) || !(argv.cmd)) {
                    console.error("You must specify both a node constraint pattern and a command to execute!");
                    process.exit(1);
                }
                var nodes = Object.keys(config.nodes);
                // node constraint
                if (argv.pattern) {
                    nodes = getMatchingNodes(Object.keys(config.nodes), 'node=='+argv.pattern);
                }
                // classic swarm constraint
                var constraints = parseEnv(argv);
                for (var i = constraints.length - 1; i >= 0; i--) {
                    nodes = getMatchingNodes(nodes, constraints[i]);
                }
                // run all the commands
                for (var i = nodes.length - 1; i >= 0; i--) {
                    (function (node) {
                        var cmdline = "ssh -oStrictHostKeyChecking=no -p "+argv.port+" "+argv.user+"@"+config.nodes[node].ip+" "+argv.cmd;
                        child_process.exec(cmdline, {}, function (err, stdout, stderr) {
                            if (!err) {
                                // expect just container id
                                console.log(node, ":", stdout.trim());
                            } else {
                                // should show error
                                console.error(node, ":", stderr);
                            }
                        });
                    })(nodes[i]);
                };
            })
            .demandCommand(1)
        ;
    })
    .command('run', 'Run a command in a new container', function () {}, function (argv) {
        // expand container names
        if(!argv.name) {
            console.error("Please specify a container name (or array using brace expansion)");
            process.exit(1);
        }
        var strategy = 'least-running';
        var names = expand(argv.name);
        var containers = [];
        for (var i = names.length; i--; ) {
            containers.push({
                name: names[i],
                node: 'unallocated'
            });
        }
        // make sure we alway have array for env vars
        var constraints = parseEnv(argv);
        // run each constraint sequentially to whittle down the nodes
        var nodes = Object.keys(config.nodes);
        for (var i = constraints.length - 1; i >= 0; i--) {
            nodes = getMatchingNodes(nodes, constraints[i]);
        }
        // see what we got
        if (nodes.length == 0) {
            console.error("No nodes matched the constraints specified.");
            process.exit(1);
        }
        else if (nodes.length < containers.length) {
            if (!config.overprovision) {
                console.error("Not enough nodes matched (", nodes.length,
                ") for the specified container array (", containers.length,
                ") and overprovision is not enabled.");
                process.exit(1);
            } else {
                // use round robin strategy with the available nodes
                console.log("Using round robin strategy with", nodes.length, "nodes");
                var count = 0;
                for (var i = containers.length; i--; ) {
                    if (count >= nodes.length) {
                        count = 0;
                    }
                    containers[i].node = nodes[count];
                    count++;
                }
                runContainers(argv, containers);
            }
        }
        else if (nodes.length == containers.length) {
            // exact match then run them straight
            for (var i = containers.length - 1; i >= 0; i--) {
                containers[i].node = nodes[i];
            }
            runContainers(argv, containers);
        }
        else {
            // too many nodes matched!
            if (strategy == 'least-running') {
                orderNodesByRunning(nodes).then(function (orderednodes) {
                    for (var i = containers.length - 1; i >= 0; i--) {
                        containers[i].node = orderednodes[i];
                    }
                    runContainers(argv, containers);
                });
            }
            else {
                console.error("Too many nodes matched and no scheduling strategy defined.");
                process.exit(1);
            }
        }
    })
    .command('start', 'Start one or more stopped containers', function (yargs) {
            return yargs
                .usage('cdocker start <node pattern>/<name pattern>');
        }, function (argv) {
            callContainerFunction(argv, 'start');
        })
    .command('stop', 'Stop one or more running containers', function (yargs) {
            return yargs
                .usage('cdocker stop <node pattern>/<name pattern>');
        }, function (argv) {
            callContainerFunction(argv, 'stop');
        })
    .command('kill', 'Kill one or more running containers', function (yargs) {
            return yargs
                .usage('cdocker kill <node pattern>/<name pattern>');
        }, function (argv) {
            callContainerFunction(argv, 'kill');
        })
    .command('rm', 'Remove one or more containers', function (yargs) {
            return yargs
                .usage('cdocker rm <node pattern>/<name pattern>');
        }, function (argv) {
            callContainerFunction(argv, 'rm');
        })
    .command('pull', 'Pull an image or a repository from a registry')
    .command('rmi', 'Remove one or more images')
    .command('ps', 'List containers')
    .demandCommand(1)
    .help('h')
    .alias('h', 'help')
    .argv
;